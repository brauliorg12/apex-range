import {
  ButtonInteraction,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
} from 'discord.js';

/**
 * Crea el embed y botones para el men√∫ principal de selecci√≥n de modos.
 *
 * @param guildName - Nombre del servidor para mostrar en el footer
 * @returns Objeto con embed y componentes para el men√∫ principal
 */
export function createMainMenuEmbed(guildName: string) {
  const modeEmbed = new EmbedBuilder()
    .setTitle('üéõÔ∏è Selecciona el Modo de Configuraci√≥n')
    .setDescription(
      'Elige c√≥mo quieres configurar los canales para el bot de Apex Legends:\n\n' +
        '**üîÑ Autom√°tico**\n' +
        '‚Ä¢ Crea canales autom√°ticamente con nombres predeterminados\n' +
        '‚Ä¢ `#apex-range-admin` y `#apex-rangos`\n' +
        '‚Ä¢ Ideal para configuraci√≥n r√°pida\n\n' +
        '**‚öôÔ∏è Manual**\n' +
        '‚Ä¢ Especifica nombres personalizados para nuevos canales\n' +
        '‚Ä¢ Control total sobre los nombres\n' +
        '‚Ä¢ Perfecto para personalizaci√≥n\n\n' +
        '**üìé Usar Canales Existentes**\n' +
        '‚Ä¢ Utiliza canales ya creados en tu servidor\n' +
        '‚Ä¢ No crea nuevos canales\n' +
        '‚Ä¢ Ideal para servidores organizados'
    )
    .setColor(0x00ff00)
    .setFooter({
      text: `Servidor: ${guildName}`,
    });

  const modeButtons = new ActionRowBuilder<ButtonBuilder>().addComponents(
    new ButtonBuilder()
      .setCustomId('modo_auto')
      .setLabel('Autom√°tico')
      .setStyle(ButtonStyle.Secondary)
      .setEmoji('üîÑ'),
    new ButtonBuilder()
      .setCustomId('modo_manual')
      .setLabel('Manual')
      .setStyle(ButtonStyle.Secondary)
      .setEmoji('‚öôÔ∏è'),
    new ButtonBuilder()
      .setCustomId('modo_existente')
      .setLabel('Canales Existentes')
      .setStyle(ButtonStyle.Secondary)
      .setEmoji('üìé')
  );

  const extraButtons = new ActionRowBuilder<ButtonBuilder>().addComponents(
    new ButtonBuilder()
      .setCustomId('configure_excluded_roles')
      .setLabel('Configurar Roles Excluidos')
      .setStyle(ButtonStyle.Secondary)
      .setEmoji('üö´')
  );

  // Bot√≥n para re-ejecutar el panel de gesti√≥n en el canal actual
  const managementButtonRow =
    new ActionRowBuilder<ButtonBuilder>().addComponents(
      new ButtonBuilder()
        .setCustomId('modo_panel_gestion')
        .setLabel('Panel de Gesti√≥n')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('üõ†Ô∏è')
    );

  return {
    embeds: [modeEmbed],
    components: [modeButtons, extraButtons, managementButtonRow],
  };
}

/**
 * Maneja la navegaci√≥n de vuelta al men√∫ principal de selecci√≥n de modos de configuraci√≥n.
 *
 * Esta funci√≥n proporciona navegaci√≥n fluida dentro del flujo de configuraci√≥n del bot
 * de Apex Legends, permitiendo a los usuarios regresar al men√∫ principal de selecci√≥n
 * de modos desde cualquier punto del proceso de configuraci√≥n. Restaura exactamente
 * la misma interfaz inicial que presenta las tres opciones principales de configuraci√≥n
 * con el mismo formato, colores y contenido detallado.
 *
 * Modos de configuraci√≥n presentados:
 * - **Autom√°tico**: Creaci√≥n autom√°tica de canales con nombres predeterminados
 * - **Manual**: Configuraci√≥n personalizada con nombres de canales especificados por el usuario
 * - **Canales Existentes**: Utilizaci√≥n de canales ya creados en el servidor
 *
 * Esta funci√≥n es crucial para mantener una experiencia de usuario intuitiva y consistente,
 * permitiendo navegaci√≥n bidireccional dentro del flujo de configuraci√≥n sin cambios visuales.
 *
 * @param interaction - La interacci√≥n de bot√≥n que activ√≥ el regreso al men√∫ principal
 * @returns Promise<void> - No retorna valor, actualiza la interfaz directamente
 */
export async function handleBackToModes(interaction: ButtonInteraction) {
  await interaction.deferUpdate();

  const menuData = createMainMenuEmbed(
    interaction.guild?.name || 'Desconocido'
  );

  await interaction.editReply(menuData);
}

/**
 * Maneja la cancelaci√≥n del setup
 */
export async function handleCancelSetup(interaction: ButtonInteraction) {
  await interaction.deferUpdate();

  const cancelEmbed = new EmbedBuilder()
    .setTitle('‚ùå Configuraci√≥n Cancelada')
    .setDescription(
      'La configuraci√≥n ha sido cancelada. Puedes ejecutar `/setup-roles` nuevamente cuando est√©s listo.'
    )
    .setColor(0xff0000);

  await interaction.editReply({
    embeds: [cancelEmbed],
    components: [],
  });
}

/**
 * Maneja la navegaci√≥n de vuelta al panel de administraci√≥n.
 * Esta funci√≥n puede ser personalizada para mostrar el embed del panel de admin espec√≠fico.
 * Actualmente, por defecto, vuelve al men√∫ de modos de setup.
 * @param interaction La interacci√≥n de bot√≥n
 */
export async function handleBackToAdminPanel(interaction: ButtonInteraction) {
  // Por ahora, vuelve al men√∫ de modos. Personaliza esta funci√≥n para mostrar el embed del panel de admin.
  await handleBackToModes(interaction);
}
